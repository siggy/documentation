<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clients on Mastodon documentation</title>
    <link>https://documentation.sig.gy/client/</link>
    <description>Recent content in Clients on Mastodon documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://documentation.sig.gy/client/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with the API</title>
      <link>https://documentation.sig.gy/client/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://documentation.sig.gy/client/intro/</guid>
      <description>An introduction to REST Mastodon provides access to its data over a REST API. REST stands for REpresentational State Transfer, but for our purposes, just think of it as sending and receiving information about various resources based on the request. The Mastodon REST API uses HTTP for its requests, and JSON for its payloads.
Understanding HTTP requests and responses REST API endpoints can be called with certain HTTP methods, and more than one method can be used on the same endpoint.</description>
    </item>
    
    <item>
      <title>Guidelines and best practices</title>
      <link>https://documentation.sig.gy/client/guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://documentation.sig.gy/client/guidelines/</guid>
      <description>Login The user must be able to login to any Mastodon server from the app. This means you must ask for the server&amp;rsquo;s domain and use the app registrations API to dynamically obtain OAuth2 credentials.
Usernames Decentralization must be transparent to the user. It should be possible to see that a given user is from another server, by e.g. displaying their acct somewhere. Note that acct is equal to username for local users, and equal to username@domain for remote users.</description>
    </item>
    
    <item>
      <title>Libraries and implementations</title>
      <link>https://documentation.sig.gy/client/libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://documentation.sig.gy/client/libraries/</guid>
      <description>Apex (Salesforce) apex-mastodon C# (.NET Standard) Mastodot Mastonet TootNet mastodon-api-cs Mastodon.Net C++ mastodonpp Crystal mastodon.cr Common Lisp tooter Dart mastodon_dart Elixir hunter Go go-mastodon madon Haskell hastodon Java mastodon4j JavaScript masto.js libodonjs JavaScript (Browser) mastodon.js JavaScript (Node.js) node-mastodon mastodon-api Perl Mastodon::Client PHP Mastodon API for Laravel Composer based php API wrapper MastodonOAuthPHP Phediverse Mastodon REST Client TootoPHP oauth2-mastodon Mastodon Wordpress API Python Mastodon.py R mastodon Ruby mastodon-api Rust mammut (unmaintained) elefren (unmaintained) Scala scaladon Scheme Guile elefan Swift MastodonKit </description>
    </item>
    
    <item>
      <title>Logging in with an account</title>
      <link>https://documentation.sig.gy/client/authorized/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://documentation.sig.gy/client/authorized/</guid>
      <description>Scopes explained When we registered our app and when we will authorize our user, we need to define what exactly our generated token will have permission to do. This is done through the use of OAuth scopes. Each API method has an associated scope, and can only be called if the token being used for authorization has been generated with the corresponding scope.
Scopes must be a subset. When we created our app, we specified read write follow push &amp;ndash; we could simply request all available scopes by specifying read write follow push, but it is a better idea to only request what your app will actually need through granular scopes.</description>
    </item>
    
    <item>
      <title>Obtaining client app access</title>
      <link>https://documentation.sig.gy/client/token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://documentation.sig.gy/client/token/</guid>
      <description>Authentication and authorization Up until this point, we&amp;rsquo;ve been working with publicly available information, but not all information is public. Some information requires permission before viewing it, in order to audit who is requesting that information (and to potentially revoke or deny access).
This is where OAuth comes in. OAuth is a mechanism for generating access tokens which can be used to authenticate (verify) that a request is coming from a specific client, and ensure that the requested action is authorized (allowed) by the server&amp;rsquo;s access control policies.</description>
    </item>
    
    <item>
      <title>Playing with public data</title>
      <link>https://documentation.sig.gy/client/public/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://documentation.sig.gy/client/public/</guid>
      <description>Now that you know how to construct HTTP requests using cURL or your favorite programming language&amp;rsquo;s HTTP utility or library, it is time to learn about endpoints and responses.
Endpoints explained All HTTP requests are made against a target URL. When you request data to or from a website, you do so by using a specific URL. Depending on the URL, your request will be interpreted by the HTTP server and the appropriate response will be returned to you.</description>
    </item>
    
  </channel>
</rss>
